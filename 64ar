#!/usr/bin/env python
#####################################################################################
# The MIT License (MIT)
#
# Copyright (c) 2014 Christiane Ruetten, cr/@/23bit.net
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#####################################################################################
# ChangeLog #
# 0.1 - public preview version
version = "0.1"

# t64 file format, see http://unusedino.de/ec64/technical/formats/t64.html
# pc64 file format, see http://unusedino.de/ec64/technical/formats/pc64.html

import sys
import os
from struct import pack,unpack


class T64File( object ):
	"""
	Class to hold T64 file objects.
	If source is given, it is passed to the .load() function.
	"""

	def __init__( self, src=None ):
		"""
		Constructor for C64 file objects.
		If src is given, it is passed to the .load() function.
		Else an empty object is created.
		"""
		self.direntrytype = 0
		self.filetype = 0
		self.startaddr = 0
		self.name = ""
		self.data = ""

		if src is not None:
			self.load( src )

	def load( self, src=None ):
		"""
		Retrieves and parses src as PC64 image file.
		src can be the name of an existing file, afile object, or a string.
		"""		
		if isinstance( src, file ):
			data = file.read()
		elif isinstance( src, str ):
			if os.path.isfile( src ):
				with open( src, "rb" ) as f:
					data = f.read()
			else:
				data = src
		else:
			data = str( src )

		if len(data)<28:
			raise Exception( "invalid data source" )

		magic, zero, filename, zero, relsize, startaddr = unpack( "<7sB16sBBH", data[:28] )

		if magic != "C64File":
			raise Exception( "data not in PC64 format" )

		# unpad filename
		while filename.endswith('\x00'):
			filename = filename[:-1]
		self.name = filename

		# TODO: determine file type from name
		sys.stderr.write( "WARNING: defaulting to file type $82 (PRG)\n" )
		self.filetype = 0x82
		self.direntrytype = 1

		# rest must be the data
		self.data = data[28:]


	def save( self, dst=None ):
		"""
		Saves file in PC64 format to dst.
		dst can be a string designating a file name, or a file object.
		When dst is omitted, data is returned as a string.
		"""
		filename = self.paddedname( '\x00' )
		relsize = 0
		s = pack( "<7sB16sBBH", "C64File", 0, filename, 0, relsize, self.startaddr )
		s += self.data
		if isinstance( dst, file ):
			dst.write( s )
		elif isinstance( dst, str ):
			with open( dst, "wb" ) as f:
				f.write( s )
		else:
			return s

	def paddedname( self, pad=' ' ):
		"""
		Internal padding function
		"""
		s = self.name
		if len( s ) > 16:
			s = s[:16] # truncate too long name
			sys.stderr.write( "WARNING: truncating too long file name %s\n" % repr(self.name) )
		return s + pad * (16-len(s))

	def direntry( self , offset ):
		"""
		Internal function for generating a T64 directory entry.
		"""
		if self.direntrytype == 0:
			return '\x00' * 32
		elif self.direntrytype == 1:
			endaddr = self.startaddr + len(self.data)
			direntry = pack( "<BBHHHLL", self.direntrytype, self.filetype, self.startaddr, endaddr, 0, offset, 0 )
			direntry += self.paddedname()
			return direntry
		else:
			sys.stderr.write( "WARNING: unsupported dir entry type %i. Creating empty entry.\n" % repr(self.direntrytype) )
			return '\x00' * 32

	def filename( self, pos=0 ):
		"""
		Returns file name of object as it would be written to the file system.
		If pos is given, it will be used as number in the extension, else the number will be 0.
		"""
		pos = int( pos )
		if self.direntrytype == 0:
			return "<empty>"
		if self.filetype == 0x80:   # DEL
			ext = ".D%02d" % pos
		elif self.filetype == 0x81: # SEQ
			ext = ".S%02d" % pos
		elif self.filetype == 0x82: # PRG
			ext = ".P%02d" % pos
		elif self.filetype == 0x83: # USR
			ext = ".U%02d" % pos
		elif self.filetype == 0x81: # REL
			ext = ".R%02d" % pos
		else:
			ext = ".P%02d" % pos    # fallback for malformed archives
		return self.name + ext


class T64Image( object ):
	"""
	Holds a T64 image object.
	"""

	signatures = ["C64 tape image file", "C64 tape file", "C64S tape image file", "C64S tape image file"]
	
	def __init__( self, rawdata=None ):
		"""
		Creates a T64 image object.
		Optional parameter is parsed as raw T64 image data.
		Without parameter, an empty T64 object is created.
		"""

		self.signature = self.signatures[0]
		self.version = 0x100
		self.name = "EMPTY TAPE"
		self.files = []

		if rawdata is not None:
			self.parse( rawdata )

	def parse( self, rawdata ):
		"""
		Parses raw data string as T64 image data into this object.
		"""

		# Image header
		p = 0x00
		self.signature = self.unpad( rawdata[p:p+32], '\x00' )
		
		# Directory Header
		p = 0x20
		self.version, direntriesmax, direntriesused, unused = unpack( "<HHHH", rawdata[p:p+8] )
		self.name = self.unpad( rawdata[p+8:p+32], '\x20' )
		dirlist = []
		numfiles = 0
		for i in xrange( direntriesmax ):
			p = 0x40 + 32*i
			direntrytype, filetype, startaddr, endaddr, unused, offset, unused = unpack( "<BBHHHLL", rawdata[p:p+16] )
			if direntrytype == 0:
				dirlist.append( None )
			elif direntrytype == 1:
				name = self.unpad( rawdata[p+16:p+32], '\x20' )
				dirlist.append( { "direntrytype":direntrytype, "filetype":filetype, "startaddr":startaddr, "endaddr":endaddr, "name":name, "offset":offset } )
				numfiles += 1
			else:
				sys.stderr.write( "ERROR: dir entry %i has unsupported type %i. ABORTING\n" % (i,direntrytype) )
				sys.stderr.write( "Please send this .t64 file to the author of this script for analysis.")
				sys.exit( -5 )

		if len( dirlist ) != direntriesmax: # should never happen
			sys.stderr.write( "WARNING: incorrect number of dir entries in header: %i should be %i. FIXED\n" % (direntriesmax,len(dirlist)) )
		if numfiles != direntriesused:
			sys.stderr.write( "WARNING: number of files does not match header info: %i, should be %i. FIXED\n" % (direntriesused,numfiles) )

		# workaround for broken T64 files is to not rely on start and end addresses, but on offsets
		# files with endaddr == 0xc3c6 are probably broken

		offsets = []
		files = {}
		for f in dirlist:
			if f is not None:
				offsets.append( f["offset"] )
				files[ f["offset"] ] = f

		offsets.sort()
		offsets.append( len(rawdata) )
		assert len(offsets) > 1

		for i in xrange( len(offsets)-1 ):
			offset = offsets[i]
			f = files[offset]
			lengthbyoffset = offsets[i+1] - offset
			lengthbyaddress = f["endaddr"] - f["startaddr"] # 2-byte load address is stored in header, but will be part of extracted file
			if lengthbyoffset == lengthbyaddress:
				f["data"] = rawdata[offset:offset + lengthbyaddress]
				f.pop("offset", None)
			else:
				sys.stderr.write( "WARNING: wrong length %i in header, should be %i. FIXED\n" % (lengthbyaddress,lengthbyoffset) )
				f["data"] = rawdata[offset:offset + lengthbyoffset]
				f.pop("offset", None)

		self.files = []
		for f in dirlist:
			if f is None:
				self.files.append( T64File() )
			else:
				n = T64File()
				n.direntrytype = f["direntrytype"]
				n.filetype = f["filetype"]
				n.startaddr = f["startaddr"]
				n.name = f["name"]
				n.data = f["data"]
				self.files.append( n )

	def __getitem__( self, i ):
		"""
		Convenience getter to support indexing of file objects.
		"""
		return self.files[i]

	def __setitem__( self, i, v ):
		"""
		Convenience setter to support indexing of file objects.
		"""
		self.files[i] = v

	def load( self, filename ):
		"""
		Parses specified file as T64 image data.
		Parameter can be a file object, or a file name.
		"""
		if isinstance( filename, file ):
			self.parse( sys.stdin.read() )
		elif isinstance( filename, str ):
			with open( filename, 'rb' ) as f:
				self.parse( f.read() )
		else:
			raise Exception( "object %s is not readable" % repr(filename) )

	def save( self, filename ):
		"""
		Saves T64 image to file.
		Parameter can be a file object, or a file name.
		"""
		if isinstance( filename, file ):
			filename.write( self.dump() )
		elif isinstance( filename, str ):
			with open( filename, 'wb' ) as f: 
				f.write( self.dump() )
		else:
			raise Exception( "object %s is not writable" % repr( filename ) )

	def pad( self, s, pad, l ):
		"""
		Internal padding function.
		"""
		assert len( pad ) == 1
		if len(s) > l:
			s = s[:l] # truncate too long strings
		return s + pad*(l-len(s))	

	def unpad( self, s, pad ):
		"""
		Internal unpadding function.
		"""
		assert len( pad ) == 1
		while s.endswith( pad ):
			s = s[:-1]
		return s

	def info( self ):
		"""
		Prints archive meta data to stdout.
		"""
		print "#tape name:   %s" % repr( self.name )
		print "#signature:   %s" % repr( self.signature )
		print "#version:     %x" % self.version
		print "#dir entries: %s" % len( self.files )

	def dir( self, verbose=False, pos=False ):
		"""
		Prints archive listing to stdout.
		When pos is True, file exten numbering is incrementend to
		indicate positional order with in archive directory.
		verbose adds information in the format:
		directory_index:filetype  start_address/end_address  file_length
		"""
		if verbose:
			self.info()
		for i in xrange(len( self.files )):
			p = self.files[i]
			if p is not None:
				if p.direntrytype != 0:
					if verbose:
						s = "%3i:%02x  $%04x/$%04x %8d " % (i, p.filetype, p.startaddr, p.startaddr+len(p.data), len(p.data) )
					else:
						s = ""
					if pos:
						s += self.name + os.path.sep + p.filename( pos=i )
					else:
						s += self.name + os.path.sep + p.filename()
					print s

	def cleanup( self ):
		"""
		Fix malformed archive and delete empty directory slots.
		"""

		# TODO: also fix file types
		self.signature = self.signatures[0]
		self.version = 0x100

		cleanfiles = []
		for f in self.files:
			if f is not None:
				if f.direntrytype == 1:
					cleanfiles.append( f )
		self.files = cleanfiles

	def dump( self ):
		"""
		Return T64 object as string in T64 image format.
		"""
		# calculate correct numbers for directory header
		direntriesmax = len(self.files)
		direntriesused = 0
		for f in self.files:
			if f is not None:
				if f.direntrytype != 0:
					direntriesused += 1

		headerdata = self.pad( self.signature, '\x00', 32 )
		headerdata += pack( "<HHHH", self.version, direntriesmax, direntriesused, 0 )
		headerdata += self.pad( self.name, '\x20', 24 )

		dirsize = 32 * len(self.files)
		dirdata = ""
		filedata = ""
		for f in self.files:
			if f is not None:
				offset = len(headerdata) + dirsize + len(filedata)
				dirdata += f.direntry( offset )
				filedata += f.data
			else:
				dirdata += '\x00' * 32

		image = headerdata + dirdata + filedata
		return image

###################################################################################################
# main

def main():
	from optparse import OptionParser

	usage = "usage: %prog {-x | -c <dir>| -t | -E | -R} [options] [-f <archive>]"
	parser = OptionParser( usage=usage, version="%prog "+version )
	parser.add_option( "-x", "--extract", action="store_true", dest="extract", default=False, help="extract files from an archive" )
	parser.add_option( "-c", "--create", action="store_true", dest="create", default=False, help="create a new archive" )
	parser.add_option( "-t", "--list", action="store_true", dest="list", default=False, help="list the contents of an archive" )
	parser.add_option( "-E", "--edit", action="store_true", dest="edit", default=False, help="edit an archive interactively" )
	parser.add_option( "-R", "--repair", action="store_true", dest="repair", default=False, help="repair a malformed archive" )
	parser.add_option( "-P", "--position", action="store_true", dest="keep_position", default=False, help="encode position in file names" )
	parser.add_option( "-v", "--verbose", action="store_true", dest="verbose", default=False, help="verbose operation" )
	parser.add_option( "-q", "--quiet", action="store_true", dest="quiet", default=False, help="suppress warnings" )
	parser.add_option( "-f", "--file", dest="filename", help="verbose operation" )

	# support old-style "tvf" tar arguments
	if len(sys.argv)>1 and not sys.argv[1].startswith( '-' ):
		sys.argv[1] = '-' + sys.argv[1]
	(opt, args) = parser.parse_args()

	##############################################################################
	if opt.list:
		t = T64Image()
		if opt.filename:
			t.load( opt.filename )
		else:
			t.load( sys.stdin )
		if opt.repair:
			t.cleanup()
		t.dir( verbose=opt.verbose, pos=opt.keep_position )

	##############################################################################
	elif opt.extract:
		t = T64Image()
		if opt.filename:
			t.load( opt.filename )
		else:
			t.load( sys.stdin )
		if opt.repair:
			t.cleanup()

		if os.path.exists( t.name ):
			if not os.path.isdir( t.name ):
				sys.stderr.write( "ERROR: %s already exists, but is not a directory\n" % t.name )
				sys.exit( -5 )
		else:
			os.mkdir( t.name, 0755 )

		os.chdir( t.name )
		for i in xrange( len( t.files ) ):
			f = t.files[i]
			if opt.keep_position:
				filename = f.filename( pos=i )
			else:
				filename = f.filename()
			if opt.verbose:
				print t.name + os.path.sep + filename
			f.save( filename )


	##############################################################################
	elif opt.create:
		t = T64Image()

		if len( args ) < 1:
			sys.stderr.write( "ERROR: no directory given\n" )
			sys.exit( -5 )

		if len( args ) > 1:
			sys.stderr.write( "WARNING: ignoring extra arguments\n" )			

		if not os.path.isdir( args[0] ):
			sys.stderr.write( "ERROR: %s is not a directory\n" )
			sys.exit( -5 )

		dirname = args[0]
		while dirname.endswith( os.path.sep ):
			dirname = dirname[:-1]
		t.name = os.path.basename( dirname ) #TODO: sanitize/recode name

		oldpwd = os.getcwd()
		os.chdir( dirname )
		allfiles = [x for x in os.walk('.')][0][2]
		cbmfiles = []
		for filename in allfiles:
			ext = os.path.splitext( filename )[1]
			if len(ext) != 4:
				continue
			typechar = ext[1]
			try:
				pos = int(ext[2:])
			except ValueError:
				continue
			finally:
				cbmfiles.append( (filename, pos) )

		if opt.keep_position:
			cbmfiles.sort( key=lambda x: x[1] )

		for x in cbmfiles:
			f = T64File( x[0] )
			t.files.append( f )
			if opt.verbose:
				sys.stderr.write( "%s\n" % x[0] )

		if opt.repair:
			t.cleanup()

		if opt.filename:
			os.chdir( oldpwd )
			t.save( opt.filename )
		else:
			t.save( sys.stdout )


	##############################################################################
	elif opt.edit:
		t = T64Image()
		if not opt.filename:
			sys.stderr.write( "ERROR: edit mode requires file argument" )
		else:
			t.load( opt.filename )
			if opt.repair:
				t.cleanup()

			print "Welcome to the 64ar interactive python shell."
			print "The archive is loaded as the object t."
			print "Type help(t) and help(T64File) for usage info."
			print
			t.dir( verbose=True )
			print

			from IPython.terminal.embed import InteractiveShellEmbed
			ipshell = InteractiveShellEmbed( banner1="ready.", exit_msg="bye." )
			ipshell.confirm_exit = False
			ipshell()

			print "Do you want to save changes (y/[n])? ",
			l = sys.stdin.readline()
			if l.startswith( "y" ):
				t.save( opt.filename )
				print "saved."
			print

	##############################################################################
	elif opt.repair:
		t = T64Image()
		if opt.filename:
			t.load( opt.filename )
			t.cleanup()
			t.save( opt.filename )
		else:
			t.load( sys.stdin )
			t.cleanup()
			t.save( sys.stdout )

	##############################################################################
	else:
		sys.stderr.write( 'ERROR: you must specify a valid command\n' )
		sys.exit( -5 )

if __name__ == '__main__':
	main()