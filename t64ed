#!/usr/bin/env python
# (c) 2014 Christiane Ruetten, cr at 23bit net
# licensed under GPLv3
version = "0.1"


# t64 file format, see http://unusedino.de/ec64/technical/formats/t64.html

import sys
import os
from struct import pack,unpack


class T64File( object ):
	def __init__( self, data=None ):
		self.direntrytype = 0
		self.filetype = 0
		self.startaddr = 0
		self.name = ""
		self.data = ""

		if data is not None:
			assert len(data) >= 2
			self.startaddr = unpack( "<H", data[:2] )
			self.data = data[2:]

	def paddedname( self ):
		s = self.name
		if len( s ) > 16:
			s = s[:16] # truncate too long name
			sys.stderr.write( "WARNING: truncating too long file name %s\n" % repr(self.name) )
		return s + ' ' * (16-len(s))

	def direntry( self , offset ):
		if direntrytype == 0:
			return '\x00' * 32
		elif direntrytype == 1:
			endaddr = self.startaddr + len(self.data)
			direntry = pack( "<BBHHHLL", self.direntrytype, self.filetype, self.startaddr, endaddr, 0, offset, 0 )
			direntry += self.paddedname()
			return direntry
		else:
			sys.stderr.write( "WARNING: unsupported dir entry type %i. Creating empty entry.\n" % repr(self.direntrytype) )
			return '\x00' * 32


class T64Image( object ):
	"""Holds a T64 image object.
	"""

	signatures = ["C64 tape image file", "C64 tape file", "C64S tape image file", "C64S tape image file"]
	
	def __init__( self, rawdata=None ):
		"""
		Creates a T64 image object.
		Optional parameter is parsed as raw t64 image data.
		Without parameter, an empty image object is created.
		"""

		self.signature = self.signatures[0]
		self.version = 0x100
		self.name = "EMPTY TAPE"
		self.files = []

		if rawdata is not None:
			self.parse( rawdata )

	def parse( self, rawdata ):
		"""
		Parses raw data string as T64 object.
		"""
		# Image header
		p = 0x00
		self.signature = self.unpad( rawdata[p:p+32], '\x00' )
		
		# Directory Header
		p = 0x20
		self.version, direntriesmax, direntriesused, unused = unpack( "<HHHH", rawdata[p:p+8] )
		self.name = self.unpad( rawdata[p+8:p+32], '\x20' )
		dirlist = []
		numfiles = 0
		for i in xrange( direntriesmax ):
			p = 0x40 + 32*i
			direntrytype, filetype, startaddr, endaddr, unused, offset, unused = unpack( "<BBHHHLL", rawdata[p:p+16] )
			if direntrytype == 0:
				dirlist.append( None )
			elif direntrytype == 1:
				name = self.unpad( rawdata[p+16:p+32], '\x20' )
				dirlist.append( { "direntrytype":direntrytype, "filetype":filetype, "startaddr":startaddr, "endaddr":endaddr, "name":name, "offset":offset } )
				numfiles += 1
			else:
				sys.stderr.write( "ERROR: dir entry %i has unsupported type %i. ABORTING\n" % (i,direntrytype) )
				sys.stderr.write( "Please send this .t64 file to the author of this script for analysis.")
				sys.exit( -5 )

		if len( dirlist ) != direntriesmax: # should never happen
			sys.stderr.write( "WARNING: incorrect number of dir entries in header: %i should be %i. FIXED\n" % (direntriesmax,len(dirlist)) )
		if numfiles != direntriesused:
			sys.stderr.write( "WARNING: number of files does not match header info: %i, should be %i. FIXED\n" % (direntriesused,numfiles) )

		# workaround for broken T64 files is to not rely on start and end addresses, but on offsets
		# files with endaddr == 0xc3c6 are probably broken

		offsets = []
		files = {}
		for f in dirlist:
			if f is not None:
				offsets.append( f["offset"] )
				files[ f["offset"] ] = f

		offsets.sort()
		offsets.append( len(rawdata) )
		assert len(offsets) > 1

		for i in xrange( len(offsets)-1 ):
			offset = offsets[i]
			f = files[offset]
			lengthbyoffset = offsets[i+1] - offset
			lengthbyaddress = f["endaddr"] - f["startaddr"] # 2-byte load address is stored in header, but will be part of extracted file
			if lengthbyoffset == lengthbyaddress:
				f["data"] = rawdata[offset:offset + lengthbyaddress]
				f.pop("offset", None)
			else:
				sys.stderr.write( "WARNING: wrong length %i in header, should be %i. FIXED\n" % (lengthbyaddress,lengthbyoffset) )
				f["data"] = rawdata[offset:offset + lengthbyoffset]
				f.pop("offset", None)

		self.files = []
		for f in dirlist:
			if f is None:
				self.files.append( T64File() )
			else:
				n = T64File()
				n.direntrytype = f["direntrytype"]
				n.filetype = f["filetype"]
				n.startaddr = f["startaddr"]
				n.name = f["name"]
				n.data = f["data"]
				self.files.append( n )

	def __getitem__( self, i ):
		return self.files[i]

	def __setitem__( self, i, v ):
		self.files[i] = v

	def load( self, filename ):
		"""
		Parses specified file as T64 image data.
		"""
		if filename == "-":
			self.parse( sys.stdin.read() )
		else:
			with open( filename, 'rb' ) as f:
				self.parse( f.read() )

	def save( self, filename ):
		"""
		Saves T64 image to file.
		"""
		if filename == "-":
			sys.stdout.write( self.dump )
		else:
			with open( filename, 'wb' ) as f: 
				f.write( self.dump() )

	def pad( self, s, pad, l ):
		assert len( pad ) == 1
		if len(s) > l:
			s = s[:l] # truncate too long strings
		return s + pad*(l-len(s))	

	def unpad( self, s, pad ):
		assert len( pad ) == 1
		while s.endswith( pad ):
			s = s[:-1]
		return s

	def info( self ):
		print "signature:", repr( self.signature )
		print "version: %x" % self.version
		print "tape name:", repr( self.name )
		print "dir entries:", len( self.files )

	def dir( self ):
		for i in xrange(len( self.files )):
			p = self.files[i]
			if p is not None:
				if p.direntrytype != 0:
					print " %2i: d:%02x t:%02x s:$%04x l:$%04x	%s" % (i, p.direntrytype, p.filetype, p.startaddr, len(p.data), repr(p.name))

	def cleanup( self ):
		self.signature = self.signatures[0]
		self.version = 0x100

		cleanfiles = []
		for f in self.files:
			if f is not None:
				if f.direntrytype == 1:
					cleanfiles.append( f )
		self.files = cleanfiles

	def dump( self ):

		# calculate correct numbers for directory header
		direntriesmax = len(self.files)
		direntriesused = 0
		for f in self.files:
			if f is not None:
				direntriesused += 1

		headerdata = self.pad( self.signature, '\x00', 32 )
		headerdata += pack( "<HHHH", self.version, direntriesmax, direntriesused, 0 )
		headerdata += self.pad( self.name, '\x20', 24 )

		dirsize = 32 * len(self.files)
		dirdata = ""
		filedata = ""
		for f in self.files:
			if f is not None:
				offset = len(headerdata) + dirsize + len(filedata)
				dirdata = f.direntry( offset )
				filedata += f.data
			else:
				dirdata += '\x00' * 32

		image = headerdata + dirdata + filedata
		return image

###################################################################################################
# main

def main():
	from optparse import OptionParser

	usage = "usage: %prog [options] command [<input filename> [<output filename>]]"
	parser = OptionParser( usage=usage, version="%prog "+version )
	parser.add_option( "-c", "--cleanup", action="store_true", dest="cleanup", default=False,
			help="decrypt input to output" )
	(opt, args) = parser.parse_args()

	try:
		cmd = args[0]
	except IndexError:
		sys.stderr.write( 'ERROR: no command given\n' )
		sys.exit( -5 )

	try:
		infile = args[1]
	except IndexError:
		infile = "-"

	try:
		outfile = args[2]
	except IndexError:
		outfile = infile

	if cmd == "info":
		t = T64Image()
		if infile:
			t.load( infile )
			if opt.cleanup:
				t.cleanup()
			t.info()
			t.dir()

	elif cmd == "dir":
		t = T64Image()
		if infile:
			t.load( infile )
			t.dir()

	elif cmd == "edit":
		t = T64Image()
		if infile:
			t.load( infile )
			if opt.cleanup:
				t.cleanup()
			t.info()
			t.dir()

		from IPython.terminal.embed import InteractiveShellEmbed
		ipshell = InteractiveShellEmbed( banner1="ready. type ?t for usage info", exit_msg="bye." )
		ipshell()

	elif cmd == "cleanup":
		t = T64Image()
		t.load( infile )
		t.cleanup()
		t.save( outfile )

	else:
		sys.stderr.write( 'ERROR: unknown command %s\n' % cmd )
		sys.exit( -5 )

if __name__ == '__main__':
	main()